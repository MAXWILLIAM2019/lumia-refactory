const { createConnection } = require('typeorm');
const { Usuario, GrupoUsuario, AlunoInfo, AdministradorInfo, PlanoMestre, Plano, AlunoPlanos, PlanoMestreDisciplina, SprintMestre, Sprint, MetaMestre, Meta, Disciplina, Assunto, SprintAtual, RankingSemanal } = require('./dist/entities');

async function cleanOrphanedData() {
  console.log('üßπ Iniciando limpeza de dados √≥rf√£os...');

  const connection = await createConnection({
    type: 'postgres',
    host: process.env.DB_HOST || 'localhost',
    port: +(process.env.DB_PORT || 5432),
    username: process.env.DB_USERNAME || 'postgres',
    password: process.env.DB_PASSWORD || '1127',
    database: process.env.DB_DATABASE || 'mentoring',
    entities: [Usuario, GrupoUsuario, AlunoInfo, AdministradorInfo, PlanoMestre, Plano, AlunoPlanos, PlanoMestreDisciplina, SprintMestre, Sprint, MetaMestre, Meta, Disciplina, Assunto, SprintAtual, RankingSemanal],
    synchronize: false,
    logging: false,
  });

  try {
    // 1. Remover metas √≥rf√£s
    console.log('üóëÔ∏è Removendo metas √≥rf√£s...');
    const metasOrfaResult = await connection
      .createQueryBuilder()
      .delete()
      .from(Meta)
      .where('sprint_id NOT IN (SELECT id FROM "Sprints")')
      .execute();
    console.log(`‚úÖ Removidas ${metasOrfaResult.affected} metas √≥rf√£s`);

    // 2. Remover sprints √≥rf√£s
    console.log('üóëÔ∏è Removendo sprints √≥rf√£s...');
    const sprintsOrfaResult = await connection
      .createQueryBuilder()
      .delete()
      .from(Sprint)
      .where('plano_id NOT IN (SELECT id FROM "Plano")')
      .execute();
    console.log(`‚úÖ Removidas ${sprintsOrfaResult.affected} sprints √≥rf√£s`);

    // 3. Remover associa√ß√µes aluno-plano √≥rf√£s
    console.log('üóëÔ∏è Removendo associa√ß√µes aluno-plano √≥rf√£s...');
    const alunoPlanoOrfaResult = await connection
      .createQueryBuilder()
      .delete()
      .from(AlunoPlanos)
      .where('idusuario NOT IN (SELECT idusuario FROM usuario)')
      .orWhere('plano_id NOT IN (SELECT id FROM "Plano")')
      .execute();
    console.log(`‚úÖ Removidas ${alunoPlanoOrfaResult.affected} associa√ß√µes √≥rf√£s`);

    // 4. Verificar integridade final
    console.log('\nüìä === CONTAGEM FINAL DE REGISTROS ===');

    const [metaCount] = await connection.query('SELECT COUNT(*) as count FROM "Meta"');
    console.log(`üìã Meta: ${metaCount.count} registros`);

    const [sprintCount] = await connection.query('SELECT COUNT(*) as count FROM "Sprints"');
    console.log(`üèÉ Sprints: ${sprintCount.count} registros`);

    const [planoCount] = await connection.query('SELECT COUNT(*) as count FROM "Plano"');
    console.log(`üìì Plano: ${planoCount.count} registros`);

    const [alunoPlanoCount] = await connection.query('SELECT COUNT(*) as count FROM "AlunoPlanos"');
    console.log(`üë• AlunoPlanos: ${alunoPlanoCount.count} registros`);

    console.log('\nüéâ Limpeza conclu√≠da com sucesso!');
    console.log('‚úÖ Banco pronto para novos testes!');

  } catch (error) {
    console.error('‚ùå Erro durante limpeza:', error);
  } finally {
    await connection.close();
  }
}

cleanOrphanedData();
