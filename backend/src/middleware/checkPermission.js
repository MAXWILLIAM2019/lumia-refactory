/**
 * Middleware de Verifica√ß√£o de Permiss√µes
 *
 * Este middleware verifica se o usu√°rio possui as permiss√µes necess√°rias
 * para acessar um recurso espec√≠fico.
 * 
 * Facilita a transi√ß√£o para um sistema baseado em SSO como Keycloak no futuro.
 */

/**
 * Cria um middleware que verifica se o usu√°rio tem a permiss√£o especificada
 * 
 * @param {string|string[]} requiredPermissions - Permiss√£o ou array de permiss√µes necess√°rias
 * @returns {Function} Middleware de verifica√ß√£o de permiss√£o
 */
const checkPermission = (requiredPermissions) => {
  return (req, res, next) => {
    console.log('üîí Verificando permiss√µes...');
    
    // Se n√£o h√° permiss√µes requeridas, segue adiante
    if (!requiredPermissions) {
      console.log('‚úÖ Nenhuma permiss√£o espec√≠fica necess√°ria');
      return next();
    }
    
    // Se o usu√°rio n√£o est√° autenticado (sem permiss√µes definidas)
    if (!req.permissions) {
      console.log('‚ùå Usu√°rio sem permiss√µes definidas');
      return res.status(403).json({
        success: false,
        message: 'Voc√™ n√£o tem permiss√£o para acessar este recurso'
      });
    }
    
    // Converte para array caso seja uma √∫nica permiss√£o
    const permissions = Array.isArray(requiredPermissions) 
      ? requiredPermissions 
      : [requiredPermissions];
    
    // Verifica se o usu√°rio tem permiss√£o de "super usu√°rio"
    if (req.permissions.includes('read:all') || req.permissions.includes('write:all')) {
      console.log('‚úÖ Usu√°rio com permiss√£o de super usu√°rio - acesso liberado');
      return next();
    }
    
    // Verifica se o usu√°rio tem pelo menos uma das permiss√µes requeridas
    const hasPermission = permissions.some(permission => 
      req.permissions.includes(permission)
    );
    
    if (hasPermission) {
      console.log('‚úÖ Usu√°rio possui as permiss√µes necess√°rias:', permissions);
      return next();
    }
    
    console.log('‚ùå Usu√°rio n√£o possui as permiss√µes necess√°rias:', permissions);
    res.status(403).json({
      success: false,
      message: 'Voc√™ n√£o tem permiss√£o para acessar este recurso'
    });
  };
};

/**
 * Middleware para restringir acesso apenas a administradores
 */
const adminOnly = (req, res, next) => {
  if (!req.user || req.user.role !== 'administrador') {
    return res.status(403).json({
      success: false,
      message: 'Acesso restrito a administradores'
    });
  }
  next();
};

/**
 * Middleware para restringir acesso apenas a alunos
 */
const alunoOnly = (req, res, next) => {
  if (req.user?.role !== 'aluno') {
    return res.status(403).json({
      success: false,
      message: 'Acesso restrito a alunos'
    });
  }
  next();
};

/**
 * Middleware para restringir acesso ao perfil do pr√≥prio usu√°rio
 * √ötil para impedir que um aluno acesse dados de outro aluno
 */
const ownProfileOnly = (paramName = 'id') => {
  return (req, res, next) => {
    const paramId = parseInt(req.params[paramName]);
    const userId = req.user?.id;

    // Se for admin, permite o acesso
    if (req.user?.role === 'admin') {
      return next();
    }

    // Se n√£o for admin, verifica se √© o pr√≥prio perfil
    if (!userId || paramId !== userId) {
      return res.status(403).json({
        success: false,
        message: 'Voc√™ s√≥ pode acessar seu pr√≥prio perfil'
      });
    }
    next();
  };
};

module.exports = {
  checkPermission,
  adminOnly,
  alunoOnly,
  ownProfileOnly
}; 