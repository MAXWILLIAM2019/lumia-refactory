/**
 * Middleware de Autentica√ß√£o
 * 
 * Este middleware verifica se o usu√°rio est√° autenticado
 * atrav√©s do token JWT enviado no cabe√ßalho da requisi√ß√£o.
 */
const jwt = require('jsonwebtoken');

/**
 * Middleware que valida o token JWT
 * 
 * @param {Object} req - Objeto de requisi√ß√£o
 * @param {Object} res - Objeto de resposta
 * @param {Function} next - Fun√ß√£o para passar para o pr√≥ximo middleware
 */
const authMiddleware = (req, res, next) => {
  const timestamp = new Date().toLocaleString();
  console.log(`[${timestamp}] üîê Middleware de autentica√ß√£o iniciado`);
  console.log(`[${timestamp}] üîÑ M√©todo da requisi√ß√£o: ${req.method}`);
  console.log(`[${timestamp}] üåê URL da requisi√ß√£o: ${req.originalUrl}`);
  
  // Obter o token do cabe√ßalho Authorization
  const authHeader = req.headers.authorization;
  
  // Se n√£o houver token, retornar erro
  if (!authHeader) {
    console.log(`[${timestamp}] ‚ùå Token n√£o fornecido`);
    return res.status(401).json({ message: 'Token n√£o fornecido' });
  }
  
  // O token geralmente √© enviado como "Bearer <token>"
  const parts = authHeader.split(' ');
  
  if (parts.length !== 2) {
    console.log(`[${timestamp}] ‚ùå Erro no formato do token`);
    return res.status(401).json({ message: 'Erro no formato do token' });
  }
  
  const [scheme, token] = parts;
  
  // Verificar se o formato do token come√ßa com Bearer
  if (!/^Bearer$/i.test(scheme)) {
    console.log(`[${timestamp}] ‚ùå Formato de token inv√°lido`);
    return res.status(401).json({ message: 'Formato de token inv√°lido' });
  }
  
  // Verificar se o token √© v√°lido
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) {
      console.log(`[${timestamp}] ‚ùå Token inv√°lido:`, err.message);
      return res.status(401).json({ message: 'Token inv√°lido' });
    }
    
    // Extrair informa√ß√µes do token decodificado
    const userInfo = {
      id: decoded.id,
      role: decoded.role,
      isImpersonating: decoded.isImpersonating || false
    };

    // Se estiver em modo de impersonation, adicionar informa√ß√µes originais
    if (decoded['sis-mentoria']?.impersonating) {
      userInfo.originalId = decoded['sis-mentoria'].impersonating.originalId;
      userInfo.originalRole = decoded['sis-mentoria'].impersonating.originalRole;
      console.log(`[${timestamp}] üë• Modo impersonation detectado:`, {
        aluno: userInfo.id,
        admin_original: userInfo.originalId,
        papel_original: userInfo.originalRole
      });
    }

    // Adicionar informa√ß√µes √† requisi√ß√£o
    req.user = userInfo;
    
    console.log(`[${timestamp}] üë§ Informa√ß√µes do usu√°rio:`, {
      ...userInfo,
      url: req.originalUrl,
      method: req.method
    });
    
    // Continuar para o pr√≥ximo middleware ou rota
    return next();
  });
};

module.exports = authMiddleware; 