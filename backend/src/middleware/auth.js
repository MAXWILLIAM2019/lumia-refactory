/**
 * Middleware de Autentica√ß√£o
 * 
 * Verifica se o usu√°rio est√° autenticado atrav√©s do token JWT.
 * Este middleware √© aplicado √†s rotas protegidas.
 * Suporta autentica√ß√£o de administradores e alunos.
 * 
 * Projetado para ser compat√≠vel com futura integra√ß√£o SSO (Keycloak).
 */
const jwt = require('jsonwebtoken');
const Usuario = require('../models/Usuario');
const GrupoUsuario = require('../models/GrupoUsuario');
const AlunoInfo = require('../models/AlunoInfo');
const AdministradorInfo = require('../models/AdministradorInfo');

const auth = async (req, res, next) => {
  try {
    console.log('üîê Middleware de autentica√ß√£o iniciado');
    console.log('üîÑ M√©todo da requisi√ß√£o:', req.method);
    console.log('üåê URL da requisi√ß√£o:', req.originalUrl);

    // Verifica se o token foi fornecido
    const token = req.header('Authorization')?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ 
        success: false, 
        message: 'Token n√£o fornecido' 
      });
    }

    // Verifica e decodifica o token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    // Informa√ß√µes b√°sicas do usu√°rio
    const userInfo = {
      id: decoded.IdUsuario || decoded.id, // Compatibilidade com ambos os formatos
      role: decoded.role
    };

    // Se houver impersonation, adiciona as informa√ß√µes originais
    if (decoded['sis-mentoria']?.impersonating) {
      userInfo.isImpersonating = true;
      userInfo.originalId = decoded['sis-mentoria'].impersonating.originalId;
      userInfo.originalRole = decoded['sis-mentoria'].impersonating.originalRole;
    }

    // Adiciona as informa√ß√µes do usu√°rio √† requisi√ß√£o
    req.user = userInfo;

    // Log das informa√ß√µes do usu√°rio (√∫til para debug)
    console.log('üë§ Informa√ß√µes do usu√°rio:', {
      ...userInfo,
      url: req.originalUrl,
      method: req.method
    });

    next();
  } catch (error) {
    console.error('‚ùå Erro no middleware de autentica√ß√£o:', error);
    res.status(401).json({ 
      success: false, 
      message: 'Token inv√°lido ou expirado' 
    });
  }
};

/**
 * Middleware para verificar se o usu√°rio √© administrador
 */
const adminOnly = async (req, res, next) => {
  try {
    // Se estiver impersonating, usa o papel original
    const role = req.user.isImpersonating ? req.user.originalRole : req.user.role;
    
    if (role !== 'administrador') {
      return res.status(403).json({ 
        success: false, 
        message: 'Acesso permitido apenas para administradores' 
      });
    }
    next();
  } catch (error) {
    console.error('Erro ao verificar permiss√£o de administrador:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erro ao verificar permiss√µes' 
    });
  }
};

/**
 * Middleware para verificar se o usu√°rio √© o dono do recurso ou um administrador
 * @param {string} paramId - Nome do par√¢metro que cont√©m o ID do recurso
 */
const ownProfileOrAdmin = (paramId) => async (req, res, next) => {
  try {
    const resourceId = req.params[paramId];
    const userId = req.user.id;
    const role = req.user.isImpersonating ? req.user.originalRole : req.user.role;

    if (role === 'administrador' || userId === parseInt(resourceId)) {
      return next();
    }

    res.status(403).json({ 
      success: false, 
      message: 'Acesso n√£o autorizado a este recurso' 
    });
  } catch (error) {
    console.error('Erro ao verificar permiss√£o de acesso:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Erro ao verificar permiss√µes' 
    });
  }
};

module.exports = {
  auth,
  adminOnly,
  ownProfileOrAdmin
}; 