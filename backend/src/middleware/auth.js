/**
 * Middleware de Autentica√ß√£o
 * 
 * Verifica se o usu√°rio est√° autenticado atrav√©s do token JWT.
 * Este middleware √© aplicado √†s rotas protegidas.
 * Suporta autentica√ß√£o de administradores e alunos.
 * 
 * Projetado para ser compat√≠vel com futura integra√ß√£o SSO (Keycloak).
 */
const authService = require('../services/authService');
const Administrador = require('../models/Administrador');
const Aluno = require('../models/Aluno');
const AdministradorInfo = require('../models/AdministradorInfo');
const Usuario = require('../models/Usuario');
const AlunoInfo = require('../models/AlunoInfo');

const auth = async (req, res, next) => {
  console.log('üîê Middleware de autentica√ß√£o iniciado');
  console.log('üîÑ M√©todo da requisi√ß√£o:', req.method);
  console.log('üåê URL da requisi√ß√£o:', req.originalUrl);
  
  try {
    // Obt√©m o token do header
    const authHeader = req.header('Authorization');
    console.log('üìù Header de Autoriza√ß√£o recebido:', authHeader);
    
    // Verifica se o token foi enviado
    if (!authHeader) {
      console.log('‚ùå Nenhum header de autoriza√ß√£o fornecido');
      return res.status(401).json({
        success: false,
        message: 'Token n√£o fornecido'
      });
    }
    
    // Extrai o token removendo o prefixo "Bearer "
    const token = authHeader.replace('Bearer ', '');
    console.log('üîë Token extra√≠do:', token ? 'Presente' : 'Ausente');
    
    if (!token) {
      console.log('‚ùå Token vazio ap√≥s processamento');
      return res.status(401).json({
        success: false,
        message: 'Token n√£o fornecido'
      });
    }

    // Verifica se a vari√°vel de ambiente JWT_SECRET est√° definida
    if (!process.env.JWT_SECRET) {
      console.error('‚ùå ERRO CR√çTICO: JWT_SECRET n√£o definido no ambiente');
      return res.status(500).json({
        success: false,
        message: 'Erro de configura√ß√£o do servidor'
      });
    }

    try {
      // Verifica o token usando o servi√ßo de autentica√ß√£o
      const decoded = authService.verificarToken(token);
      console.log('‚úÖ Token verificado com sucesso:', decoded);
      
      // Armazena o payload decodificado no request
      req.user = decoded;
      
      // Verifica o tipo de usu√°rio (role) e busca os dados correspondentes
      if (decoded.role === 'administrador') {
        // Caso seja um administrador
        const admin = await AdministradorInfo.findOne({
          where: { IdUsuario: decoded.id },
          include: [{ model: Usuario, as: 'usuario' }]
        });
        
        if (!admin) {
          console.log('‚ùå Administrador n√£o encontrado para o ID:', decoded.id);
          return res.status(401).json({
            success: false,
            message: 'Token inv√°lido - administrador n√£o encontrado'
          });
        }
        
        console.log('üë§ Administrador autenticado:', admin.usuario?.login);
        
        // Mant√©m a compatibilidade com c√≥digo existente que pode estar usando req.admin
        req.admin = admin;
      } 
      else if (decoded.role === 'aluno') {
        // Caso seja um aluno
        const aluno = await AlunoInfo.findOne({
          where: { IdUsuario: decoded.id },
          include: [{ model: Usuario, as: 'usuario' }]
        });
        
        if (!aluno) {
          console.log('‚ùå Aluno n√£o encontrado para o ID:', decoded.id);
          return res.status(401).json({
            success: false,
            message: 'Token inv√°lido - aluno n√£o encontrado'
          });
        }
        
        console.log('üë§ Aluno autenticado:', aluno.usuario?.login);
        
        // Adiciona o aluno ao request para uso posterior
        req.aluno = aluno;
      }
      else {
        // Caso o role n√£o seja reconhecido
        console.log('‚ùå Perfil de usu√°rio n√£o reconhecido:', decoded.role);
        return res.status(401).json({
          success: false,
          message: 'Token inv√°lido - perfil n√£o reconhecido'
        });
      }
      
      // Para facilitar verifica√ß√µes futuras, adiciona as permiss√µes ao request
      req.permissions = decoded['sis-mentoria']?.permissions || [];
      
      console.log('‚úÖ Autentica√ß√£o conclu√≠da com sucesso');
      console.log('üîë Permiss√µes do usu√°rio:', req.permissions);
      
      next();
    } catch (jwtError) {
      console.error('‚ùå Erro na verifica√ß√£o do JWT:', jwtError.message);
      return res.status(401).json({
        success: false,
        message: 'Token inv√°lido ou expirado',
        details: jwtError.message
      });
    }
  } catch (error) {
    console.error('‚ùå Erro geral na autentica√ß√£o:', error);
    res.status(500).json({
      success: false,
      message: 'Falha na autentica√ß√£o',
      details: error.message
    });
  }
};

module.exports = auth; 